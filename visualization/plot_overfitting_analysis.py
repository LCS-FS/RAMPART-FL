import pandas as pd
import matplotlib.pyplot as plt
import argparse
import os
import sys

def plot_overfitting_analysis(csv_file_path: str):
    """
    Generates and saves a plot of training losses vs. global F1 score
    from an RL training data CSV to analyze overfitting.

    Args:
        csv_file_path (str): The full path to the rl_training_data.csv file.
    """
    if not os.path.exists(csv_file_path):
        print(f"Error: File not found at {csv_file_path}", file=sys.stderr)
        return

    print(f"Reading data from {csv_file_path}...")
    try:
        df = pd.read_csv(csv_file_path)
    except Exception as e:
        print(f"Error reading CSV file: {e}", file=sys.stderr)
        return

    df['server_round'] = pd.to_numeric(df['server_round'], errors='coerce')
    df.dropna(subset=['server_round'], inplace=True)
    df['server_round'] = df['server_round'].astype(int)

    df_fit = df[df['event_type'] == 'global_fit_metrics'].copy()
    df_eval = df[df['event_type'] == 'global_eval_metrics'].copy()

    fit_cols_to_convert = ['gm_fit_g_loss', 'gm_fit_d_loss']
    for col in fit_cols_to_convert:
        df_fit[col] = pd.to_numeric(df_fit[col], errors='coerce')
    df_fit.dropna(subset=fit_cols_to_convert, inplace=True)
    
    eval_cols_to_convert = ['gm_eval_f1']
    for col in eval_cols_to_convert:
        df_eval[col] = pd.to_numeric(df_eval[col], errors='coerce')
    df_eval.dropna(subset=eval_cols_to_convert, inplace=True)

    if df_fit.empty or df_eval.empty:
        print("Error: No valid 'global_fit_metrics' or 'global_eval_metrics' data found in the CSV.", file=sys.stderr)
        return
        
    fig, ax1 = plt.subplots(figsize=(14, 8))

    ax1.plot(df_fit['server_round'], df_fit['gm_fit_g_loss'], 'o-', color='tab:blue', label='Aggregated Generator Loss')
    ax1.plot(df_fit['server_round'], df_fit['gm_fit_d_loss'], 's-', color='tab:cyan', label='Aggregated Discriminator Loss')
    ax1.set_xlabel('Federated Round', fontsize=14)
    ax1.set_ylabel('Aggregated Loss', color='tab:blue', fontsize=14)
    ax1.tick_params(axis='y', labelcolor='tab:blue')
    ax1.grid(True, which='both', linestyle='--', linewidth=0.5)

    ax2 = ax1.twinx()
    ax2.plot(df_eval['server_round'], df_eval['gm_eval_f1'], '^-', color='tab:red', label='Global F1-Score (Validation)')
    ax2.set_ylabel('Global F1-Score', color='tab:red', fontsize=14)
    ax2.tick_params(axis='y', labelcolor='tab:red')
    
    ax1.set_ylim(bottom=0)
    ax2.set_ylim(0, 1.05)

    fig.suptitle('Training Loss vs. Validation F1-Score Over Federated Rounds', fontsize=16, fontweight='bold')
    ax1.set_title('Analysis for Overfitting Detection', fontsize=12)
    
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc='upper right')

    fig.tight_layout(rect=[0, 0, 1, 0.96])

    output_dir = os.path.dirname(csv_file_path)
    output_filename = "overfitting_analysis.png"
    output_filepath = os.path.join(output_dir, output_filename)
    
    try:
        plt.savefig(output_filepath)
        print(f"\nSuccessfully generated and saved plot to:\n{output_filepath}")
    except Exception as e:
        print(f"Error saving plot: {e}", file=sys.stderr)
        
    plt.close(fig)

def main():
    parser = argparse.ArgumentParser(
        description="Generate an overfitting analysis plot from Flower simulation logs.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "csv_file_path",
        type=str,
        help="Path to the 'rl_training_data.csv' file generated by a simulation run.\n"
             "Example: logs/20231027_1530/rl_training_data.csv"
    )
    args = parser.parse_args()
    
    plot_overfitting_analysis(args.csv_file_path)

if __name__ == "__main__":
    main() 